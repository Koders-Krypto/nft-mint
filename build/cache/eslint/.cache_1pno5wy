[{"/Users/vijayankith/projects/crypto/nft-mint/pages/_app.js":"1","/Users/vijayankith/projects/crypto/nft-mint/pages/api/hello.js":"2","/Users/vijayankith/projects/crypto/nft-mint/pages/index.js":"3"},{"size":137,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":170,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":3275,"mtime":1645709999003,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"od4vxd",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/vijayankith/projects/crypto/nft-mint/pages/_app.js",[],[],"/Users/vijayankith/projects/crypto/nft-mint/pages/api/hello.js",[],[],"/Users/vijayankith/projects/crypto/nft-mint/pages/index.js",["18","19","20"],[],"import Head from 'next/head';\nimport { useEffect, useState } from 'react';\nimport Web3Modal from \"web3modal\";\nimport { BigNumber, ethers } from 'ethers';\nimport {\n  phnAddress\n} from '../config';\n\nimport PHN from '../artifacts/contracts/PHN.sol/PlaceHolder.json'\n\nexport default function Home() {\n  const [active, setActive] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [nfts, setNfts] = useState([]);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    if (loading == true) {\n      connect();\n    }\n    if (contract != null) {\n      loadMyNfts();\n    }\n  }, [loading]);\n\n \n\n  async function loadMyNfts() {\n    const tokensOwned = await contract.balanceOf(account);\n    const tokenIds = []\n    for (let i = 0; i < tokensOwned; i++) {\n      const tokenId = await contract.tokenOfOwnerByIndex(account, i)\n      tokenIds.push(tokenId.toString())\n    }\n    setNfts(tokenIds)\n  }\n\n\n  async function connect() {\n    try {\n      const web3Modal = new Web3Modal();\n      const connection = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(connection);\n      const signer = provider.getSigner();\n      const address = await signer.getAddress();\n      const phnContract = new ethers.Contract(phnAddress, PHN.abi, signer);\n      setContract(phnContract);\n      setActive(true);\n      setAccount(address);\n      setLoading(false);\n      // loadMyNfts();\n\n    }\n    catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }\n\n  function walletConnect() {\n\n    async function mint() {\n      try {\n        const performMint = await contract.safeMint();\n        await performMint.wait();\n        loadMyNfts();\n      } catch (e) {\n        console.log(e);\n      }\n\n    }\n\n   \n\n    \n\n    return (\n      <div className=\"col-span-4\">\n        {!loading ?\n          (active ? <button onClick={mint} className=\"py-2 mt-20 mb-4 text-lg font-bold text-white rounded-lg w-56 bg-blue-600 hover:bg-blue-800\">MINT</button> : <button onClick={connect} className=\"py-2 mt-20 mb-4 text-lg font-bold text-white rounded-lg w-56 bg-blue-600 hover:bg-blue-800\">Connect to MetaMask</button>)\n          : <button className=\"py-2 mt-20 mb-4 text-lg font-bold text-white rounded-lg w-56 bg-blue-600 hover:bg-blue-800\">Loading...</button>}\n        {/* {active ? <span>Connected with <b>{account}</b></span> : <span>Not connected</span>} */}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Head>\n        <title>PlaceHolder NFT</title>\n        <meta name=\"description\" content=\"Generated PlaceHolder NFT\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <h1>\n          Welcome to PlaceHolder NFT\n        </h1>\n\n        {walletConnect()}\n\n        <h2 className=\"text-2xl font-semibold mb-2\">My NFTs</h2>\n        <ul className=\"grid grid-cols-4 gap-6\">\n          {nfts.map((nft) => <div key={nft} className=\"bg-gray-100 p-4 h-24 lg:h-28 flex justify-center items-center text-lg\"><img src={\"http://placehold.jp/3d4070/ffffff/150x150.png?text=\"+ nft}/></div>)}\n        </ul>\n\n\n        {/* <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">MINT</button> */}\n\n      </main>\n\n    </div>\n  )\n}\n",{"ruleId":"21","severity":1,"message":"22","line":25,"column":6,"nodeType":"23","endLine":25,"endColumn":15,"suggestions":"24"},{"ruleId":"25","severity":1,"message":"26","line":105,"column":127,"nodeType":"27","endLine":105,"endColumn":198},{"ruleId":"28","severity":1,"message":"29","line":105,"column":127,"nodeType":"27","endLine":105,"endColumn":198},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'contract' and 'loadMyNfts'. Either include them or remove the dependency array.","ArrayExpression",["30"],"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"31","fix":"32"},"Update the dependencies array to be: [contract, loadMyNfts, loading]",{"range":"33","text":"34"},[658,667],"[contract, loadMyNfts, loading]"]